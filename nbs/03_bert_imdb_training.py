# -*- coding: utf-8 -*-
"""03-bert-imdb-training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q-m4rxrUu0FUH8V-z6aHHhowMd-1UBGM

# BERT IMDB training
> Train BERT on IMDB dataset for sentiment classification

We use the `simpletransformers` library to train BERT (large) for sentiment classification on the IMDB dataset.
"""

import sys
sys.path.append('../../')
import pandas as pd
from sklearn.model_selection import train_test_split
from simpletransformers.classification import ClassificationModel

"""## IMDB dataset
The IMDB dataset contains 50k movie review annotated with "positive"/"negative" feedback indicating the sentiment. It can be downloaded from Kaggle ([link](https://www.kaggle.com/lakshmi25npathi/imdb-dataset-of-50k-movie-reviews)).

### Load dataset
"""

df = pd.read_csv('../data/imdb-dataset.csv')

df.head()

"""### Create labels"""

df['label'] = (df['sentiment']=='positive').astype(int)

df.head()

"""### Rename columns"""

df.rename({'review': 'text'}, axis=1, inplace=True)
df.drop('sentiment', axis=1, inplace=True)

df.head()

"""Train test split;"""

df_train, df_valid = train_test_split(df, test_size=0.2)

"""## Bert training

### Config
"""

args = {
    'fp16':False,
    'wandb_project': 'bert-imdb',
    'num_train_epochs': 3,
    'overwrite_output_dir':True,
    'learning_rate': 1e-5,
}

"""### Training"""

model = ClassificationModel('bert', 'bert-large-cased', use_cuda=True,args=args) 
model.train_model(df_train, output_dir='bert-imdb')
result, model_outputs, wrong_predictions = model.eval_model(df_valid)

"""### Calculate validation accuracy"""

(result['tp']+result['tn'])/(result['tp']+result['tn']+result['fp']+result['fn'])

model.predict(['The movie was really good'])